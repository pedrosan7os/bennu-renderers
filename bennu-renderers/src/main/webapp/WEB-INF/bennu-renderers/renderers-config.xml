<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE renderers-config SYSTEM "../fenix-renderers-config.dtd" []>
<renderers-config>
	<renderer type="pt.ist.fenixWebFramework.renderers.components.HtmlComponent" class="pt.ist.fenixWebFramework.renderers.StandardComponentRenderer"/>
  
    <!--@ The default presentation for every object. -->
    <renderer type="java.lang.Class" layout="label" class="pt.ist.fenixWebFramework.renderers.ClassAsLabelRenderer"/>

    <!--@ The default presentation for every object. -->
    <renderer type="java.lang.Class" layout="label-to-material-type-in-spaces-management" class="pt.ist.fenixWebFramework.renderers.ClassAsLabelRenderer">
    	<property name="labelFormat" value="label.${simpleName}.type"/>
    	<property name="bundle" value="SPACE_RESOURCES"/>
    </renderer>
    
    <!--@ The default presentation for every object. -->
    <renderer type="java.lang.Class" layout="label-to-academicCalendar-management" class="pt.ist.fenixWebFramework.renderers.ClassAsLabelRenderer">
    	<property name="labelFormat" value="label.${simpleName}.type"/>
    	<property name="bundle" value="MANAGER_RESOURCES"/>
    </renderer>

    <!--@ The default presentation for every object. -->
    <renderer type="java.lang.Object" class="pt.ist.fenixWebFramework.renderers.StandardObjectRenderer">
    		<property name="labelTerminator" value=":"/>
    </renderer>

    <renderer type="java.lang.Object" layout="null-as-label" class="pt.ist.fenixWebFramework.renderers.NullAsLabelRenderer">
    	<property name="label" value="-"/>
    </renderer>

    <renderer type="java.lang.Object" layout="link" class="pt.ist.fenixWebFramework.renderers.ObjectLinkRenderer">
    	<property name="contextRelative" value="true"/>
    </renderer>

    <!--@ A tabular presentation for an object. This consist of a table were each row presents one
          of the object's slots. The slot's name is shown in the left column and the corresponding 
          value in the right column. -->
    <renderer type="java.lang.Object" layout="tabular" class="pt.ist.fenixWebFramework.renderers.StandardObjectRenderer">
    		<property name="labelTerminator" value=":"/>
    </renderer>

    <!--@ The template layout is used when you specify the template attribute of a renderer's tag. It delegates
          the presentation of the object to a JSP that is extended with the <tt>fenix-template.tld</tt>. -->
    <renderer type="java.lang.Object" layout="template" class="pt.ist.fenixWebFramework.renderers.TemplateRenderer"/>
    
    <!--@ This layout shows each slot value after the previous without a special organization. You can specify
          a separator between values and achive simple presentations like "6666 / Jose Dias" for a person. -->
    <renderer type="java.lang.Object" layout="values" class="pt.ist.fenixWebFramework.renderers.ValuesRenderer"/>
	
	<!--@ Same thing as values renderer but does not displays slots with null values -->
    <renderer type="java.lang.Object" layout="nonNullValues" class="pt.ist.fenixWebFramework.rendererExtensions.NonNullValuesRenderer"/>

	<renderer type="java.lang.Object" layout="nonNullValues-commaSeparated" class="pt.ist.fenixWebFramework.rendererExtensions.NonNullValuesRenderer">
		<property name="htmlSeparator" value=", "/>
	</renderer>
	
    <!--@ The format offers other way of presenting objects inline. The <tt>format</tt> property accepts a special
          syntax that allows you to choose how the information is presented. Read the renderer documentation for
          more details. -->
    <renderer type="java.lang.Object" layout="format" class="pt.ist.fenixWebFramework.renderers.FormatRenderer"/>
    
    <!--@ Presents the object's slots in a flow layout. With or without labels.  -->
    <renderer type="java.lang.Object" layout="flow" class="pt.ist.fenixWebFramework.renderers.FlowRenderer">
    	<property name="labelTerminator" value=":" />
    	<property name="labelStyle" value="font-weight: bold;" />
    </renderer>


	<renderer type="java.lang.Object" layout="view-as-image" class="pt.ist.fenixWebFramework.rendererExtensions.ImageObjectRenderer"/>
	
	<renderer type="java.lang.Object" layout="prefixed" class="pt.ist.fenixWebFramework.rendererExtensions.GenericOutputWithPrefix">
		<property name="indented" value="false"/>
	</renderer>
	    
	<renderer type="java.lang.Object" layout="output-with-hover" class="pt.ist.fenixWebFramework.renderers.GenericOutputWithHoverMessage">
    	<property name="closedClasses" value="tooltip tooltipClosed"/>
    	<property name="openClasses" value="tooltip tooltipOpen"/>
    	<property name="textClasses" value="tooltipText"/>
	</renderer>

	<renderer type="java.lang.Object" layout="output-with-list-hover" class="pt.ist.fenixWebFramework.renderers.GenericOutputWithHoverList">
    	<property name="closedClasses" value="tooltip tooltipClosed"/>
    	<property name="openClasses" value="tooltip tooltipOpen"/>
    	<property name="textClasses" value="tooltipText"/>
	</renderer>
	    
    <renderer type="java.lang.String" class="pt.ist.fenixWebFramework.renderers.StringRenderer">
    	<property name="noJavascriptClasses" value="nojavascript"/>
    	<property name="closedClasses" value="tooltip tooltipClosed"/>
    	<property name="openClasses" value="tooltip tooltipOpen"/>
    	<property name="textClasses" value="tooltipText"/>
    </renderer>
          
    <renderer type="java.lang.String" layout="short" class="pt.ist.fenixWebFramework.renderers.StringRenderer">
   		<property name="length" value="40"/>  
    </renderer>
    
    <renderer type="java.lang.String" layout="text-link" class="pt.ist.fenixWebFramework.renderers.StringRenderer">
    	<property name="link" value="true"/>
    </renderer>
    
    <!--@ Considers that the string is html and as such does not escape it's content nor does it replace newlines. -->
    <renderer type="java.lang.String" layout="html" class="pt.ist.fenixWebFramework.renderers.StringRenderer">
        <property name="newlineAware" value="false"/>
        <property name="escaped" value="false"/>
    </renderer>
    
    <renderer type="java.lang.String" layout="code-block" class="pt.ist.fenixWebFramework.renderers.CodeRenderer"/>

    <renderer type="pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString" class="pt.ist.fenixWebFramework.rendererExtensions.MultiLanguageStringRenderer">
    	<property name="languageShown" value="false"/>
    </renderer>
    <renderer type="pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString" layout="short" class="pt.ist.fenixWebFramework.rendererExtensions.ShortMultiLanguageStringRenderer">
       	<property name="length" value="40"/>
       	<property name="languageShown" value="false"/>
    </renderer>

    <!-- <renderer type="pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString" layout="short-html" class="pt.ist.fenixWebFramework.rendererExtensions.ShortMultiLanguageStringRenderer">  -->
	<renderer type="pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString" layout="short-html" class="pt.ist.fenixWebFramework.rendererExtensions.MultiLanguageStringRenderer">
    	<property name="escaped" value="false"/>
<!--     	<property name="languageShown" value="false"/> -->
    </renderer>
    <renderer type="pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString" layout="html" class="pt.ist.fenixWebFramework.rendererExtensions.MultiLanguageStringRenderer">
    	<property name="escaped" value="false"/>
    	<property name="languageShown" value="false"/>
    </renderer>
    
    <renderer type="java.lang.Number" class="pt.ist.fenixWebFramework.renderers.IntegerRenderer"/>
    <renderer type="java.lang.Number" layout="fileSize" class="pt.ist.fenixWebFramework.rendererExtensions.FileSizeRenderer">
    	   <property name="shortUnit" value="true"/>
    </renderer>

    <renderer type="int" class="pt.ist.fenixWebFramework.renderers.IntegerRenderer"/>
    <renderer type="long" class="pt.ist.fenixWebFramework.renderers.IntegerRenderer"/>
    <renderer type="short" class="pt.ist.fenixWebFramework.renderers.IntegerRenderer"/>
    
    <renderer type="double" class="pt.ist.fenixWebFramework.renderers.NumberRenderer"/>
    <renderer type="float" class="pt.ist.fenixWebFramework.renderers.NumberRenderer"/>
    
    <renderer type="java.lang.Boolean" class="pt.ist.fenixWebFramework.renderers.BooleanRenderer"/>
    <renderer type="boolean" class="pt.ist.fenixWebFramework.renderers.BooleanRenderer"/>

	<!--@ Specific renderer for a boolean. This renderer adds a control link to change the boolean state -->
    <renderer type="java.lang.Boolean" layout="boolean-changer" class="pt.ist.fenixWebFramework.rendererExtensions.BooleanLinkChangerRenderer"/>
	<!--@ Specific renderer for a boolean. This renderer adds a control link to change the boolean state -->
    <renderer type="boolean" layout="boolean-changer" class="pt.ist.fenixWebFramework.rendererExtensions.BooleanLinkChangerRenderer"/>

    <!--@ The default presentation for an enum searches the bundle ENUMERATION_RESOURCES for a description
          of the enum value. The key used for seaching is the enum name. -->
    <renderer type="java.lang.Enum" class="pt.ist.fenixWebFramework.renderers.EnumRenderer"/>
    
	<renderer type="java.util.EnumSet" class="pt.ist.fenixWebFramework.renderers.EnumSetRenderer"/>    
    
    <!--@ The default presentation of the date respect the user locale and preents the date
          accordingly with the format given.  -->
    <renderer type="java.util.Date" class="pt.ist.fenixWebFramework.renderers.DateRenderer"/>

	<renderer type="org.joda.time.base.AbstractPartial" class="pt.ist.fenixWebFramework.rendererExtensions.PartialRenderer"/>
	
	<renderer type="org.joda.time.Duration" class="pt.ist.fenixWebFramework.rendererExtensions.DurationRenderer"/>

	<!--@ The default presentation for a joda partial is the presentation of all the date components of partial as
		  a normal date and a label explaining the components presented -->
    <renderer type="org.joda.time.Partial" class="pt.ist.fenixWebFramework.rendererExtensions.PartialRenderer"/>

    <renderer type="org.joda.time.Partial" layout="month" class="pt.ist.fenixWebFramework.rendererExtensions.PartialRenderer">
        <property name="format" value="MMM"/>    	    	
    </renderer>
    
    <renderer type="org.joda.time.Partial" layout="year-partial" class="pt.ist.fenixWebFramework.rendererExtensions.PartialRenderer">
        <property name="format" value="yyyy"/>    	    	
    </renderer>

    <!--@ Tag Renderers -->
    
    <renderer mode="input" type="pt.ist.fenixframework.DomainObject" layout="autoComplete" class="pt.ist.fenixWebFramework.rendererExtensions.AutoCompleteInputRenderer">
        <property name="autoCompleteItemsStyleClass" value="autoCompleteItems"/>
        <property name="autoCompleteStyleClass" value="autoComplete"/>
        <property name="minChars" value="3"/>
        <property name="valueField" value="externalId"/>
    </renderer>
        
    <!--@ The default layout for a collection. -->
    <renderer type="java.util.Collection" class="pt.ist.fenixWebFramework.renderers.CollectionRenderer"/>
    
    <!--@ Each object in the collection will be presented in a differente row. The given schema is used to define 
          the table columns as well as the table header. The table can also be extended with control links to the right. 
          Control links are link that are parameterized with values from the object beeing presented in each row.
          Check the renderer documentation for more details.  -->
    <renderer type="java.util.Collection" layout="tabular" class="pt.ist.fenixWebFramework.renderers.CollectionRenderer">
        	<property name="groupLinks" value="true"/>
        	<property name="linkGroupSeparator" value=", "/>
    </renderer>
    
    
    <!--@ Renders a table with a given schema for a domain object but doesn't render fields that are null or empty
     -->
    <renderer type="java.lang.Object" layout="tabular-nonNullValues" class="pt.ist.fenixWebFramework.renderers.TabularNonNullValuesRenderer"/>

    <!--@ This layout intends to provide the control links feature to a list presentation. Each object in the collection
          is presented with their own layout and schema in the left column o the table. -->
    <renderer type="java.util.Collection" layout="tabular-list" class="pt.ist.fenixWebFramework.renderers.TabularListRenderer"/>
    
    <!--@ Each object in the collection is presented with it's own layout and schema. This layouts works for several objects
          the same way that the <tt>values</tt> layouts works for slots. -->
    <renderer type="java.util.Collection" layout="flowLayout" class="pt.ist.fenixWebFramework.rendererExtensions.FlowCollectionRenderer" />
    
    <!--@ The tree layout allows a collection to be presented as a tree, that is, were you specify how an hierarchy is
          formed and a structure made by lists inside lists is created. -->

    <renderer type="java.util.Collection" layout="tree" class="pt.ist.fenixWebFramework.rendererExtensions.TreeRenderer">
    	<property name="imageFor(Section)" value="/images/icon-section.gif"/>
    	<property name="imageFor(Item)" value="/images/icon-item.gif"/>
    	<property name="imageFor(Forum)" value="/images/icon-forum.gif"/>
    	<property name="imageFor(Attachment)" value="/images/icon-attachment.gif"/>
    	<property name="imageFor(FunctionalityCall)" value="/images/icon-institutional.gif"/>
    </renderer>
    
    <!--@ The default layout for a list really creates an html list were each object is presented in a list item. -->
    <renderer type="java.util.List" class="pt.ist.fenixWebFramework.renderers.ListRenderer"/>
    <renderer type="java.util.Collection" layout="list" class="pt.ist.fenixWebFramework.renderers.ListRenderer"/>

    <renderer type="java.util.Collection" layout="list-personFunctions" class="pt.ist.fenixWebFramework.renderers.ListRenderer">
    	<property name="eachLayout" value="values"/>
    	<property name="eachSchema" value="site.functions.personFunction.person"/>
    </renderer>
    
    <!--@ LabelFormatter output. -->
    <renderer type="pt.utl.ist.fenix.tools.resources.LabelFormatter" class="pt.ist.fenixWebFramework.rendererExtensions.LabelFormatterRenderer">
    		<property name="bundleName(application)" value="APPLICATION_RESOURCES"/>
    		<property name="bundleName(enum)" value="ENUMERATION_RESOURCES"/>
    		<property name="bundleName(default)" value="APPLICATION_RESOURCES"/>
    </renderer>
    
	<!--@ Decimal output. -->
    <renderer type="java.math.BigDecimal" class="pt.ist.fenixWebFramework.renderers.DecimalRenderer" layout="decimal-format"/>
    <renderer type="java.lang.Double" class="pt.ist.fenixWebFramework.renderers.DecimalRenderer" layout="decimal-format"/>
    
    <renderer type="pt.ist.bennu.core.domain.util.Money" class="pt.ist.bennu.core.presentationTier.renderers.MoneyRenderer" />

    
    <!--@ The default layout for editing objects.  -->  
    <renderer mode="input" type="java.lang.Object" class="pt.ist.fenixWebFramework.renderers.StandardInputRenderer">
    		<property name="labelTerminator" value=":"/>
    		<property name="helpNoJavascriptClasses" value="nojavascript"/>
    		<property name="helpClosedClasses" value="chelp closed"/>
    		<property name="helpOpenClasses" value="chelp copen"/>
    		<property name="helpTextClasses" value="chelptext"/>
    		<property name="helpImageIcon" value="images/icon_help.gif"/>
    </renderer>

    <!--@ Allows an object to be editing in a tabular way, that is, labels are presented in the left column of the table
          and slot editors are presented in the right column. Additionally validation errors messages are presented to the
          right of the editor. -->  
    <renderer mode="input" type="java.lang.Object" layout="tabular" class="pt.ist.fenixWebFramework.renderers.StandardInputRenderer">
    		<property name="labelTerminator" value=":"/>
    		<property name="helpNoJavascriptClasses" value="nojavascript"/>
    		<property name="helpClosedClasses" value="chelp closed"/>
    		<property name="helpOpenClasses" value="chelp copen"/>
    		<property name="helpTextClasses" value="chelptext"/>
    		<property name="helpImageIcon" value="images/icon_help.gif"/>
    </renderer>
    <!--@ Allows an object to be editing in a tabular with break way, that is, labels are presented in an upper row of the table
          and slot editors are presented in the row below. Additionally validation errors messages are presented to the
          right of the editor. -->  
	<renderer mode="input" type="java.lang.Object" layout="tabular-break" class="pt.ist.fenixWebFramework.renderers.StandardInputBreakRenderer">
		<property name="labelTerminator" value=":"/>
	</renderer>
    

    <!--@ This layout is the same as the default tabular layout but it includes the default presentation for an objecti input.  -->  
    <renderer mode="input" type="java.lang.Object" layout="tabular-style5" class="pt.ist.fenixWebFramework.renderers.StandardInputRenderer">
        <property name="labelTerminator" value=":"/>
        <property name="classes" value="tstyle3 thlight thright mbottom05"/>
        <property name="columnClasses" value=",,tdclear tderror1"/>
      	<property name="helpNoJavascriptClasses" value="nojavascript"/>
  		<property name="helpClosedClasses" value="chelp closed"/>
   		<property name="helpOpenClasses" value="chelp copen"/>
   		<property name="helpTextClasses" value="chelptext"/>
	   	<property name="helpImageIcon" value="images/icon_help.gif"/>
    </renderer>
    
    <!--@ This layout allows several slots to be edited without a specific organization. Each slot's editor e shown after the
          previous. You can shoose to present the slot's label or not. -->
    <renderer mode="input" type="java.lang.Object" layout="flow" class="pt.ist.fenixWebFramework.renderers.FlowInputRenderer">
            <property name="labelTerminator" value=":"/>
    </renderer>

    <!--@ Can be used to fill a slot with one of many possible objects. The objects are presented in an html menu. 
          Note that since the selection is made through a menu the presentatio of each object must be short and 
          valid as a menu option text. Use the <tt>format</tt> property if possible. -->
    <renderer mode="input" type="java.lang.Object" layout="menu-select" class="pt.ist.fenixWebFramework.rendererExtensions.InputMenuOptionListRenderer"/>
    <renderer mode="input" type="java.lang.String" layout="menu-select-with-other" class="pt.ist.fenixWebFramework.rendererExtensions.StringInputMenuOptionListRenderer"/>

    <!--@ Can be used to fill a slot with one of many possible objects. The objects are presented in an html menu. 
          Note that since the selection is made through a menu the presentatio of each object must be short and 
          valid as a menu option text. Use the <tt>format</tt> property if possible. -->    
	<renderer mode="input" type="java.lang.Object" layout="menu-select-postback" class="pt.ist.fenixWebFramework.rendererExtensions.InputMenuOptionListRendererWithPostback"/>

    <renderer mode="input" type="java.lang.String" class="pt.ist.fenixWebFramework.renderers.StringInputRenderer"/>

	<renderer mode="input" type="java.lang.Object" layout="input-with-comment" class="pt.ist.fenixWebFramework.renderers.GenericInputWithComment"/>
	
    <!--@ This layout allows an html text string to be edited with the fenix javascript html editor. 
          If the current browser is not supported by the html editor then it falls back to a simple text area. -->
    <renderer mode="input" type="java.lang.String" layout="htmlEditor" class="pt.ist.fenixWebFramework.rendererExtensions.htmlEditor.HtmlEditorRenderer"/>
    
    <!--@ This layout can be used to edit html text using the TinyMCE editor instead of the standard html editor. -->
    <renderer mode="input" type="java.lang.String" layout="rich-text" class="pt.ist.fenixWebFramework.rendererExtensions.htmlEditor.RichTextInputRenderer">
		<property name="safe" value="true"/>
    </renderer>

    <!--@ This layout indicates that we want to accept a text that can be very long and extend over multiple lines.  -->
    <renderer mode="input" type="java.lang.String" layout="longText" class="pt.ist.fenixWebFramework.renderers.TextAreaInputRenderer"/>
    
    <!--@ This layout allows a string to be edited with the password field -->
    <renderer mode="input" type="java.lang.String" layout="password" class="pt.ist.fenixWebFramework.renderers.PasswordInputRenderer"/>
    
    <renderer mode="input" type="pt.utl.ist.fenix.tools.util.Strings" class="pt.ist.fenixWebFramework.rendererExtensions.StringsInputRenderer"/>
    
    <renderer mode="input" type="pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString" class="pt.ist.fenixWebFramework.rendererExtensions.MultiLanguageStringInputRenderer"/>
    <renderer mode="input" type="pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString" layout="area" class="pt.ist.fenixWebFramework.rendererExtensions.MultiLanguageTextInputRenderer"/>
    <renderer mode="input" type="pt.utl.ist.fenix.tools.util.i18n.MultiLanguageString" layout="rich-text" class="pt.ist.fenixWebFramework.rendererExtensions.MultiLanguageRichTextInputRenderer"/>
	    
    <renderer mode="input" type="java.lang.Number" class="pt.ist.fenixWebFramework.renderers.IntegerInputRenderer"/>

    <renderer mode="input" type="int" class="pt.ist.fenixWebFramework.renderers.IntegerInputRenderer"/>
    <renderer mode="input" type="java.lang.Integer" class="pt.ist.fenixWebFramework.renderers.IntegerInputRenderer"/>
    <renderer mode="input" type="long" class="pt.ist.fenixWebFramework.renderers.LongInputRenderer"/>
    <renderer mode="input" type="java.lang.Long" class="pt.ist.fenixWebFramework.renderers.LongInputRenderer"/>
    <renderer mode="input" type="short" class="pt.ist.fenixWebFramework.renderers.ShortInputRenderer"/>
    <renderer mode="input" type="java.lang.Short" class="pt.ist.fenixWebFramework.renderers.ShortInputRenderer"/>
    <renderer mode="input" type="double" class="pt.ist.fenixWebFramework.renderers.DoubleInputRenderer"/>
    <renderer mode="input" type="java.lang.Double" class="pt.ist.fenixWebFramework.renderers.DoubleInputRenderer"/>
    <renderer mode="input" type="float" class="pt.ist.fenixWebFramework.renderers.FloatInputRenderer"/>
    <renderer mode="input" type="java.lang.Float" class="pt.ist.fenixWebFramework.renderers.FloatInputRenderer"/>
    <renderer mode="input" type="java.math.BigDecimal" class="pt.ist.fenixWebFramework.renderers.BigDecimalInputRenderer"/>
    
    
    

    <!--@ The default input layout for a boolean is a checkbox. Check is <tt>true</tt>, unchecked is <tt>false</tt>.  -->
    <renderer mode="input" type="java.lang.Boolean" class="pt.ist.fenixWebFramework.renderers.BooleanInputRenderer"/>
    <!--@ The default input layout for a boolean is a checkbox. Check is <tt>true</tt>, unched is <tt>false</tt>.  -->
    <renderer mode="input" type="boolean" class="pt.ist.fenixWebFramework.renderers.BooleanInputRenderer"/>
    
    <!--@ This layout allows you to input a boolean value though a menu. The menu is filled with two options. 
          The labels are fetched from the resources with the keys <tt>TRUE</tt> and <tt>FALSE</tt>. -->
    <renderer mode="input" type="java.lang.Boolean" layout="menu" class="pt.ist.fenixWebFramework.renderers.BooleanMenuInputRenderer"/>
    <!--@ This layout allows you to input a boolean value though a menu. The menu is filled with two options. 
          The labels are fetched from the resources with the keys <tt>TRUE</tt> and <tt>FALSE</tt>. -->
    <renderer mode="input" type="java.lang.Boolean" layout="radio" class="pt.ist.fenixWebFramework.renderers.BooleanRadioInputRenderer"/>
    <renderer mode="input" type="boolean" layout="radio-postback" class="pt.ist.fenixWebFramework.renderers.BooleanRadioInputRendererWithPostBack"/>
    <renderer mode="input" type="java.lang.Boolean" layout="radio-postback" class="pt.ist.fenixWebFramework.renderers.BooleanRadioInputRendererWithPostBack"/>    
    
    <!--@ This layout allows you to input a boolean value though a menu. The menu is filled with two options. 
          The labels are fetched from the resources with the keys <tt>TRUE</tt> and <tt>FALSE</tt>. -->
    <renderer mode="input" type="boolean" layout="menu" class="pt.ist.fenixWebFramework.renderers.BooleanMenuInputRenderer"/>
    
    <!--@ The default input layout for an enumeration presents an html menu with all the values of the enumeration
          as options. The option labels are fetched from the resources using the enum name as key.  -->
    <renderer mode="input" type="java.lang.Enum" class="pt.ist.fenixWebFramework.renderers.EnumInputRenderer"/> 
    <!--@ The input layout (with postback) for an enumeration presents an html menu with all the values of the enumeration
          as options. The option labels are fetched from the resources using the enum name as key. -->     
    <renderer mode="input" type="java.lang.Enum" layout="menu-postback" class="pt.ist.fenixWebFramework.renderers.EnumInputRendererWithPostBack"/>    
    <!--@ The input layout for an enumeration presents radio buttons with all the values of the enumeration
          as options. The option labels are fetched from the resources using the enum name as key.  -->     
    <renderer mode="input" type="java.lang.Enum" layout="radio" class="pt.ist.fenixWebFramework.renderers.EnumRadioInputRenderer">
    	<property name="style" value="list-style:none"/>
    </renderer>
    <!--@ The input layout (with postback) for an enumeration presents radio buttons with all the values of the enumeration
          as options. The option labels are fetched from the resources using the enum name as key. -->     
    <renderer mode="input" type="java.lang.Enum" layout="radio-postback" class="pt.ist.fenixWebFramework.rendererExtensions.EnumRadioInputRendererWithPostBack"/>

    <renderer mode="input" type="org.joda.time.DateTime" class="pt.ist.fenixWebFramework.rendererExtensions.DateTimeInputRenderer"/>
   
    <renderer mode="input" layout="picker" type="org.joda.time.DateTime" class="pt.ist.fenixWebFramework.rendererExtensions.DateTimeInputRendererWithPicker">
    	<property name="image" value="images/calendar.gif"/>
    </renderer>
   
	<renderer mode="input" layout="picker" type="org.joda.time.LocalDate" class="pt.ist.fenixWebFramework.rendererExtensions.LocalDateInputRendererWithPicker">
		<property name="image" value="images/calendar.gif"/>
	</renderer>

    <renderer mode="input" layout="picker" type="org.joda.time.Interval" class="pt.ist.fenixWebFramework.rendererExtensions.IntervalAsDatesInputRendererWithPicker">
    	<property name="image" value="images/calendar.gif"/>
    </renderer>
	
	<!--@ The layout year-month allows you to insert a joda time partial given a month and a year -->
	<renderer mode="input" type="org.joda.time.Partial" layout="year-month" class="pt.ist.fenixWebFramework.rendererExtensions.PartialInputRenderer">
		<property name="year" value="true"/>
		<property name="month" value="true"/>
	</renderer>
	
	<!--@ The layout year allows you to insert a joda time partial given a year -->
	<renderer mode="input" type="org.joda.time.Partial" layout="year" class="pt.ist.fenixWebFramework.rendererExtensions.PartialInputRenderer">
		<property name="year" value="true"/>
	</renderer>
		
	<!--@ The layout year-month allows you to insert a joda time partial given a month, a year, and a day -->
	<renderer mode="input" type="org.joda.time.Partial" layout="year-month-day" class="pt.ist.fenixWebFramework.rendererExtensions.PartialInputRenderer">
		<property name="year" value="true"/>
		<property name="month" value="true"/>
		<property name="day" value="true"/>
	</renderer>

	<!--@ The default layout for a TimeOfDay automatically includes the hour, minute, and second in the partial -->
	<renderer mode="input" type="org.joda.time.TimeOfDay" class="pt.ist.fenixWebFramework.rendererExtensions.PartialInputRenderer">
		<property name="hour" value="true"/>
		<property name="minute" value="true"/>
		<property name="second" value="true"/>
	</renderer>
	
	<renderer mode="input" type="org.joda.time.TimeOfDay" layout="multiple-format-hour-minute" class="pt.ist.fenixWebFramework.rendererExtensions.MultipleFormatTimeInputRenderer">
		<property name="hour" value="true"/>
		<property name="minute" value="true"/>
	</renderer>
	
	<!--@ The default layout for a TimeOfDay automatically includes the hour, minute, and second in the partial -->
	<renderer mode="input" type="org.joda.time.Partial" layout="hour-minute" class="pt.ist.fenixWebFramework.rendererExtensions.PartialInputRenderer">
		<property name="hour" value="true"/>
		<property name="minute" value="true"/>
	</renderer>
	
	<!--@ The default layout for a YearMonthDay automatically includes the hour, minute, and second in the partial -->
	<renderer mode="input" type="org.joda.time.YearMonthDay" class="pt.ist.fenixWebFramework.rendererExtensions.PartialInputRenderer">
		<property name="year" value="true"/>
		<property name="month" value="true"/>
		<property name="day" value="true"/>
	</renderer>
	
	<!--@ The default layout for a LocalDate automatically includes the hour, minute, and second in the partial -->
	<renderer mode="input" type="org.joda.time.LocalDate" class="pt.ist.fenixWebFramework.rendererExtensions.PartialInputRenderer">
		<property name="year" value="true"/>
		<property name="month" value="true"/>
		<property name="day" value="true"/>
	</renderer>
	
	<!--@ The default layout for a DateTime automatically includes the hour, minute, and second in the partial -->
	<renderer type="org.joda.time.DateTime" class="pt.ist.fenixWebFramework.renderers.FormatRenderer">
		<property name="format" value="${dayOfMonth,02d}-${monthOfYear,02d}-${year} ${hourOfDay,02d}:${minuteOfHour,02d}"/>
	</renderer>	

	<renderer type="org.joda.time.DateTime" layout="no-time" class="pt.ist.fenixWebFramework.renderers.FormatRenderer">
		<property name="format" value="${dayOfMonth,02d}-${monthOfYear,02d}-${year}"/>
	</renderer>

    <renderer type="org.joda.time.DateTime" layout="as-date" class="pt.ist.fenixWebFramework.rendererExtensions.DateTimeAsDateRenderer"/>

	<renderer type="org.joda.time.DateTime" class="pt.ist.fenixWebFramework.rendererExtensions.DateTimeDataDependentRenderer" layout="dataDependent">
		<property name="formatWithTime" value="${dayOfMonth,02d}-${monthOfYear,02d}-${year} ${hourOfDay,02d}:${minuteOfHour,02d}"/>
		<property name="formatWithoutTime" value="${dayOfMonth,02d}-${monthOfYear,02d}-${year}"/>
	</renderer>
	
	<!--@ The default layout for a YearMonthDay automatically includes the day, month, and year -->
	<renderer type="org.joda.time.YearMonthDay" class="pt.ist.fenixWebFramework.renderers.FormatRenderer">
		<property name="format" value="${dayOfMonth,02d}-${monthOfYear,02d}-${year}"/>
	</renderer>	
	
	<!--@ The default layout for a LocalDate automatically includes the day, month, and year -->
	<renderer type="org.joda.time.LocalDate" class="pt.ist.fenixWebFramework.renderers.FormatRenderer">
		<property name="format" value="${dayOfMonth,02d}-${monthOfYear,02d}-${year}"/>
	</renderer>	
	
	<renderer type="org.joda.time.YearMonthDay" layout="year-month" class="pt.ist.fenixWebFramework.renderers.FormatRenderer">
		<property name="format" value="${monthOfYear,02d}-${year}"/>
	</renderer>	
	
	<renderer type="org.joda.time.LocalDate" layout="year-month" class="pt.ist.fenixWebFramework.renderers.FormatRenderer">
		<property name="format" value="${monthOfYear,02d}-${year}"/>
	</renderer>	

    <!--@ Allows to present a collection in a table were rows can be sorted by pressing the table headers. -->
    <renderer type="java.util.Collection" layout="tabular-sortable" class="pt.ist.fenixWebFramework.renderers.OrderableCollectionRenderer">
        <property name="groupLinks" value="true"/>
        <property name="linkGroupSeparator" value=", "/>
    </renderer>

    <!--@ Allows to edit all objects of a collection by presenting each object in a table row and each slot editor in a table cell. -->
    <renderer mode="input" type="java.util.Collection" layout="tabular-editable" class="pt.ist.fenixWebFramework.renderers.TabularInputRenderer"/>

    <!--@ A single object is edited in a tabular layout but slots are edited horizontally in a table row. -->
    <renderer mode="input" type="java.lang.Object" layout="tabular-row" class="pt.ist.fenixWebFramework.renderers.SingleObjectTabularInputRenderer"/>
    
    <!--@ Presents a list were each object is presented with it's own layout and schema in a list item. Each item has
          an checkbox associated. This layout allows to choose several objects from a list. Only the choosen object will
          be part o the list that is created and used as the slot's value.  -->
    <renderer mode="input" type="java.util.List" layout="option-select" class="pt.ist.fenixWebFramework.rendererExtensions.InputCheckBoxListRenderer">
    	<property name="eachClasses" value="dinline" />
    </renderer>
    
     <!--@ Presents a list were each object is presented with it's own layout and schema in a list item. Each item has
          an radio button associated. This layout allows to choose an object from a list. The choosen object will be 
          the slot's value.  -->
    <renderer mode="input" type="java.lang.Object" layout="radio-select" class="pt.ist.fenixWebFramework.renderers.RadioButtonListRenderer">
        	<property name="eachClasses" value="dinline" />
        <property name="style" value="list-style: none; padding: 0; margin: 0;" />
    </renderer>
    <renderer mode="input" type="java.lang.Object" layout="radio-select-postback" class="pt.ist.fenixWebFramework.renderers.RadioButtonListRendererWithPostback">
        	<property name="eachClasses" value="dinline" />
        <property name="style" value="list-style: none; padding: 0; margin: 0;" />
    </renderer>
    
    <!--@ This layout allows you to construct a list of objects for input. The deletion if managed by the renderer the
          addition of objects to the list must be handled by an external action. -->
    <renderer mode="input" type="java.util.List" layout="external-add" class="pt.ist.fenixWebFramework.rendererExtensions.ManageableListRenderer"/>

    <renderer mode="input" type="java.io.InputStream" class="pt.ist.fenixWebFramework.renderers.FileInputRenderer"/>

    <!--@ This layout is the default layout for creating objects. The input of a class is the same as creating a new object of the
          type represented by the class. This allows to reuse all the other layouts defined for the input mode, that is, we don't need
          to define a create mode and redefine all the layouts to that mode.  -->
    <renderer mode="input" type="java.lang.Class" class="pt.ist.fenixWebFramework.renderers.StandardInputRenderer">
    	<property name="helpNoJavascriptClasses" value="nojavascript"/>
    	<property name="helpClosedClasses" value="chelp closed"/>
    	<property name="helpOpenClasses" value="chelp copen"/>
    	<property name="helpTextClasses" value="chelptext"/>
    	<property name="helpImageIcon" value="images/icon_help.gif"/>
	   </renderer>

    <!--@ This layouts is the same as the <tt>values</tt> layout preconfigured with an html separator of values. This
          way it can be used as a property of other layout. -->
    <renderer type="java.lang.Object" layout="values-dash" class="pt.ist.fenixWebFramework.renderers.ValuesRenderer">
        <property name="htmlSeparator" value=" - "/>
    </renderer>

    <!-- FIXME: this should be removed, used for renderers examples only -->
    <renderer type="java.lang.Object" layout="nice-details-table" class="pt.ist.fenixWebFramework.renderers.StandardObjectRenderer">
        <property name="classes" value="style1"/>
        <property name="columnClasses" value="listClasses,"/>
    </renderer>
    
    <renderer type="java.lang.Object" layout="values-comma" class="pt.ist.fenixWebFramework.renderers.ValuesRenderer">
        <property name="htmlSeparator" value=", "/>
    </renderer>

    <renderer type="java.lang.Object" layout="values-with-br" class="pt.ist.fenixWebFramework.renderers.ValuesRenderer">
  			<property name="htmlSeparator" value="&lt;br/&gt;"/>
    </renderer>
    
    <renderer type="java.lang.Object" layout="values-as-list" class="pt.ist.fenixWebFramework.rendererExtensions.ValuesAsListRenderer"/>
    
    <renderer type="java.util.Collection" layout="separator-list" class="pt.ist.fenixWebFramework.rendererExtensions.SeparatorListRenderer"/>

    <renderer mode="input" type="java.lang.String" layout="allow-case-change" class="pt.ist.fenixWebFramework.renderers.StringCaseChangerRenderer"/>

	<renderer mode="input" type="java.util.List" layout="tabular-option" class="pt.ist.fenixWebFramework.renderers.TabularOptionInputRenderer"/>	

	<renderer mode="input" type="java.util.List" layout="tabular-option-postback" class="pt.ist.fenixWebFramework.renderers.TabularOptionInputRendererWithPostBack"/>	

	<!--@ Layout that allows you to render a list with checkboxes with postback -->
	<renderer mode="input" type="java.util.List" layout="option-select-postback" class="pt.ist.fenixWebFramework.renderers.CheckBoxOptionListRendererWithPostBack"/>

	<!--@ Layout that allows you to render a boolean or Boolean with checkbox with postback -->
	<renderer mode="input" type="boolean" layout="option-select-postback" class="pt.ist.fenixWebFramework.renderers.BooleanInputRenderWithPostBack"/>
	<renderer mode="input" type="java.lang.Boolean" layout="option-select-postback" class="pt.ist.fenixWebFramework.renderers.BooleanInputRenderWithPostBack"/>
    
    <renderer layout="webcolor" type="java.lang.String" class="pt.ist.fenixWebFramework.rendererExtensions.WebcolorRenderer" />

	<!--@ Creates text field with an associated color picker  -->
	<renderer mode="input" layout="webcolor" type="java.lang.String" class="pt.ist.fenixWebFramework.rendererExtensions.ColorInputRenderer">
		<property name="size" value="10"/>
	</renderer>
	
	<renderer type="java.lang.String" layout="slot-as-label" class="pt.ist.fenixWebFramework.renderers.SlotAsLabelRenderer"/>

	<renderer type="pt.ist.fenixframework.DomainObject" layout="expandable" class="pt.ist.bennu.core.presentationTier.renderers.AjaxExpandableRenderer"/>
	
	<renderer type="java.lang.Class" layout="name-resolver" class="pt.ist.bennu.core.presentationTier.renderers.ClassNameResolverRenderer"/>
	
	<renderer mode="input" type="java.lang.String" layout="advanced-password" class="pt.ist.fenixWebFramework.renderers.AdvancedPasswordRenderer"/>
	
	<renderer mode="input" type="java.lang.Object" layout="matrix" class="pt.ist.fenixWebFramework.renderers.MatrixRenderer"/>
	
	<renderer type="java.lang.Boolean" layout="boolean-icon" class="pt.ist.fenixWebFramework.renderers.BooleanImageRenderer">
		<property name="trueIconPath" value="/images/ok.jpg"/>
		<property name="falseIconPath" value="/images/cancel.jpg"/>
		<property name="contextRelative" value="true"/>
	</renderer>
	
	<renderer mode="input" type="pt.ist.bennu.core.domain.util.Money" class="pt.ist.bennu.core.presentationTier.renderers.MoneyInputRenderer" />
	
    <renderer type="java.util.Collection" layout="ajax-tabular" class="pt.ist.fenixWebFramework.renderers.ajax.AjaxTableRenderer">
        	<property name="groupLinks" value="true"/>
        	<property name="linkGroupSeparator" value=", "/>
			<property name="renderCompliantTable" value="true" />        	
    </renderer>
</renderers-config>
